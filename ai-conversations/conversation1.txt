
----------------------------------
Tool: ChatGPT
Date: 2025-05-12
----------------------------------

Me: I need to build a get_weather_data(location, forecast_days=5) function for a Python weather advisor app. It should return current weather and a multi-day forecast for a given location. I want to use the wttr.in API because it doesn’t require a key and returns data in JSON format. Can you help me sketch out the structure for this function?

AI: Sure! Here’s a rough structure you can use:
python
Copy
Edit
import requests

def get_weather_data(location, forecast_days=5):
    url = f"https://wttr.in/{location}?format=j1"
    response = requests.get(url)
    data = response.json()
    
    current = data["current_condition"][0]
    forecast = data["weather"][:forecast_days]
    
    return {
        "location": location,
        "current": current,
        "forecast": forecast
    }
This function sends a GET request to wttr.in using the city name, extracts the current conditions and the desired number of forecast days, and returns them in a dictionary.

Me: Thanks! I think I need some error handling too — what if the API fails or returns invalid data? Also, what happens if the user inputs a location that doesn’t exist?

AI: Great point. You can add error handling using a try/except block and check for RequestException. Also, use .get() when accessing dictionary keys to avoid crashes.

Here’s an improved version:

python
Copy
Edit
def get_weather_data(location, forecast_days=5):
    import requests

    if forecast_days < 1 or forecast_days > 5:
        raise ValueError("Forecast days must be between 1 and 5.")

    try:
        url = f"https://wttr.in/{location}?format=j1"
        response = requests.get(url)
        response.raise_for_status()

        data = response.json()
        current = data.get("current_condition", [{}])[0]
        forecast = data.get("weather", [])[:forecast_days]

        return {
            "location": location,
            "current": current,
            "forecast": forecast
        }

    except requests.exceptions.RequestException as e:
        return {"error": f"Failed to retrieve data: {e}"}
    except ValueError as ve:
        return {"error": str(ve)}

Me: This is great. I ran a test and it works, but I noticed some cities have strange characters or spacing issues. Should I clean the input?

AI: Yes, it's a good idea to clean the location string. You can use .strip().title() or URL-encode it using urllib.parse.quote() for better formatting. Example:

python
Copy
Edit
from urllib.parse import quote
location = quote(location.strip())

Me: Perfect. I’ll add that and also check if the forecast and current keys exist before returning them. This should keep the function safe and reliable.

[END OF CONVERSATION]
